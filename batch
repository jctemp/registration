#!/usr/bin/env python3

import argparse
import os

parser = argparse.ArgumentParser(description="CLI for Batching")
parser.add_argument("--cpu", type=int, default=8, help="The number of CPUs")
parser.add_argument("--mem", type=str, default=16, help="The memory in GB")
parser.add_argument("--gpu", type=int, default=1, help="The number of GPUs")
parser.add_argument("--ckpt", type=str, default=None, help="The path to the checkpoint file")

parser.add_argument("--optimizer", default="adam", help="Optimizer for the training")
parser.add_argument("--lr", default="1e-4", help="Learning rate")
parser.add_argument("--reg_type", default="volume", help="Volume or time series (volume, series)")
parser.add_argument("--target_type", default="last", help="Volume or time series (last, mean, group)")
parser.add_argument("--max_epoch", default=100, help="The maximum number of epochs")
parser.add_argument("--series_len", default=192, help="The length of the series, e.g. 192")
parser.add_argument("model_name", help="The name of the model")
parser.add_argument("image_loss", help="The image loss function, e.g. mse:1")
parser.add_argument("flow_loss", help="The flow loss function, e.g. gl:1")

args = parser.parse_args()

run = (f"{args.model_name}-{args.image_loss}-{args.flow_loss}-{args.optimizer_name}-{args.lr}-{args.reg_type}-"
       f"{args.target_type}-{args.max_epoch}-{args.series_len}-{args.max_epoch}")

# Build bash script
bash_script = f"""#!/bin/bash
#
#SBATCH --job-name=registration_job_gpu
#SBATCH --output=/hpc/scratch/project/jvc-lab/stud/registration/log/registration_{run}_out.txt
#SBATCH --error=/hpc/scratch/project/jvc-lab/stud/registration/log/registration_{run}_err.txt
#SBATCH --time=7-00:00:00
#
#SBATCH --cpus-per-task={args.cpu}
#SBATCH --mem={args.mem}GB
#SBATCH --partition leinegpu_long
#SBATCH --gres=gpu:{args.gpu}
#SBATCH --mail-user=jamie.temple@stud.hs-hannover.de
#SBATCH --mail-type=ALL

module load Python/3.10.4
source /hpc/scratch/project/jvc-lab/stud/registration/.venv/bin/activate
cd /hpc/scratch/project/jvc-lab/stud/registration/reg
"""

bash_script += (f"python main.py --log --devices {args.gpu} --num_workers {args.cpu} "
                f"train {args.model_name} {args.image_loss} {args.flow_loss} "
                f"--optimizer {args.optimizer} "
                f"--lr {args.lr} "
                f"--reg_type {args.reg_type} "
                f"--target_type {args.target_type} "
                f"--max_epoch {args.max_epoch} "
                f"--series_len {args.series_len} ")

if args.ckpt is not None:
    bash_script += f" --path_to_ckpt {args.ckpt}"

# Execute bash script
with open("batch.sh", "w") as f:
    f.write(bash_script)
os.system("sbatch batch.sh")
os.remove("batch.sh")
