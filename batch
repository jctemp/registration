#!/usr/bin/env python3

import argparse
import os

from reg.transmorph.configs import CONFIG_TM

parser = argparse.ArgumentParser(
    prog="reg", description="Series-based TransMorph registration CLI"
)
parser.add_argument("--cpu", type=int, default=8)
parser.add_argument("--mem", type=int, default=16)
parser.add_argument("--gpu", type=int, default=1)
parser.add_argument("-l", "--log", action="store_true", help="enable logging")
parser.add_argument(
    "--resume", type=str, help="checkpoint file load to continue training"
)
parser.add_argument(
    "--epochs", type=int, default=100, help="number of epochs to train the model"
)
parser.add_argument(
    "network",
    type=str,
    default="transmorph",
    help="the name of the network configuration preset.",
    choices=list(CONFIG_TM.keys()),
    nargs="?",
)
parser.add_argument(
    "--criteria_warped",
    type=str,
    default="gmi-1",
    help="metric to score deformation, e.g. 'gmi-1-ncc-1'",
)
parser.add_argument(
    "--criteria_flow",
    type=str,
    default="gl2d-1",
    help="regularization for DVF, e.g. 'gl2d-1-bel-1'",
)
parser.add_argument(
    "--optimizer", type=str, default="adam", help="optimizer for gradient descent"
)
parser.add_argument(
    "--learning_rate",
    type=float,
    default=1e-4,
    help="step size for gradient descent",
)
parser.add_argument(
    "--registration_strategy",
    type=str,
    default="soreg",
    help="register segment or group-wise",
    choices=["soreg", "goreg"],
)
parser.add_argument(
    "--registration_target",
    type=str,
    default="last",
    help="the selection process to find a fixed image",
    choices=["last", "mean"],
)
parser.add_argument(
    "--registration_depth",
    type=int,
    default=32,
    help="the number of simultaneously registered images",
    choices=range(32, 256, 32),
)
parser.add_argument(
    "--identity_loss",
    action="store_true",
    help="consider target image deformation",
)

args = parser.parse_args()

run = (
    f"network_{args.network}.criteria-warped_{args.criteria_warped}.criteria-flow_{args.criteria_flow}."
    f"reg-strategy_{args.registration_strategy}.reg-target_{args.registration_target}."
    f"reg-depth_{args.registration_depth}.ident-loss_{args.identity_loss}.optimizer_{args.optimizer}."
    f"learning-rate_{args.learning_rate}"
)

# Build bash script
bash_script = f"""#!/bin/bash
#
#SBATCH --job-name=registration_job_gpu
#SBATCH --output=/hpc/scratch/project/jvc-lab/stud/registration/logs/batch/{run}_out.txt
#SBATCH --error=/hpc/scratch/project/jvc-lab/stud/registration/logs/batch/{run}_err.txt
#SBATCH --time=7-00:00:00
#
#SBATCH --cpus-per-task={args.cpu}
#SBATCH --mem={args.mem}GB
#SBATCH --partition leinegpu_long
#SBATCH --nodelist leinewra100
#SBATCH --gres=gpu:{args.gpu}
#SBATCH --mail-user=jamie.temple@stud.hs-hannover.de
#SBATCH --mail-type=ALL

module load Python/3.10.4
cd /hpc/scratch/project/jvc-lab/stud/registration
source ./.venv/bin/activate
"""

bash_script += (f"python -m reg "
                f"train {args.network} "
                f"--criteria_warped {args.criteria_warped} "
                f"--criteria_flow {args.criteria_flow} "
                f"--registration_strategy {args.registration_strategy} "
                f"--registration_target {args.registration_target} "
                f"--registration_depth {args.registration_depth} "
                f"--identity_loss "
                f"--optimizer {args.optimizer} "
                f"--learning_rate {args.learning_rate} "
                f"--epochs {args.epochs}")

# Execute bash script
with open("batch.sh", "w") as f:
    f.write(bash_script)
os.system("sbatch batch.sh")
os.remove("batch.sh")
